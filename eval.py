print("Start!")
import os
import torch
from collections import Counter
import numpy as np
from scipy.sparse import csr_matrix

from sklearn.preprocessing import MinMaxScaler, StandardScaler
import anndata
from torch.utils.data import DataLoader
from MultiGPS.benchmark_task import clustering, classification, reconstruction, reconstruction_RMSE
import argparse

parser = argparse.ArgumentParser(description="MultiGPS evaluation module, using selected genes to evaluate the performance")
parser.add_argument("--file_name", help="The file name of the output file")
parser.add_argument("--gene_panel", help="The gene panel file generated by MultiGPS")
parser.add_argument("--gene_number",type=int, help="The number of genes to be selected")
parser.add_argument("--target_adata", help="The target h5ad file to be evaluated")
parser.add_argument("--output_dir", help="The output directory")
parser.add_argument("--device")
parser.add_argument("--seed")
args = parser.parse_args()

# Setting up Device and Seed
device = torch.device(args.device)
np.random.seed(int(args.seed))

# Setting trial times and adata
repeat_times = 5
adata_target = anndata.read(args.target_adata)
adata_var = adata_target.var.index.tolist()


if args.gene_panel != "random":
    with open(args.gene_panel, "r") as f:
        gene_panel = f.readline()
        gene_panel = eval(gene_panel)
    
    gene_idx = []
    for x in gene_panel:
        try:
            gene_idx.append(adata_var.index(x))
        except:
            raise ValueError(f"Gene {x} not found in the target adata")
    gene_idx = gene_idx[:args.gene_number]
else:
    gene_idx = np.random.choice(adata_target.shape[1],args.gene_number, False)

print(f"Selected Gene Number:{len(gene_idx)}")
print(f"Selected Gene: {[adata_var[x] for x in gene_idx]}")

### Reconstruction ###

raw_x = adata_target.X.copy()
if isinstance(raw_x, csr_matrix):
    raw_x = raw_x.toarray()
standard_scaler = StandardScaler()
raw_x = standard_scaler.fit_transform(raw_x)

train_result, test_result = reconstruction_RMSE(raw_x[:,gene_idx], raw_x, repeat_times, device, epoch = 50 , lr = 0.01)
print(f"recon train : {np.mean(train_result)}")
print(f"recon test : {np.mean(test_result)}")
np.savetxt(args.output_dir + args.file_name + "-RMSErecon_train.txt", train_result)
np.savetxt(args.output_dir + args.file_name + "-RMSErecon_test.txt", test_result)

train_result, test_result = reconstruction(raw_x[:,gene_idx], raw_x, repeat_times, device, epoch = 50 , lr = 0.01)
print(f"recon train : {np.mean(train_result)}")
print(f"recon test : {np.mean(test_result)}")
np.savetxt(args.output_dir + args.file_name + "-Explained-Variance_recon_train.txt", train_result)
np.savetxt(args.output_dir + args.file_name + "-Explained-Variance_recon_test.txt", test_result)

### Cell type ###

raw_x = adata_target.X.copy()
if isinstance(raw_x, csr_matrix):
    raw_x = raw_x.toarray()
standard_scaler = StandardScaler()
raw_x = standard_scaler.fit_transform(raw_x)

train_result, test_result = classification(raw_x[:,gene_idx],adata_target.obs['cell_type'].astype('category').cat.codes.values,repeat_times, device, epoch=10, lr = 1e-3)
np.savetxt(args.output_dir + args.file_name + "-celltype_cls_train.txt", train_result)
np.savetxt(args.output_dir + args.file_name + "-celltype_cls_test.txt", test_result)
print(f"cell type train : {np.mean(train_result)}")
print(f"cell type test : {np.mean(test_result)}")


result_df = clustering(raw_x[:,gene_idx],adata_target.obs['cell_type'].astype('category').cat.codes.values, device)
result_df.to_csv(args.output_dir + args.file_name + "-subcelltype_unsup.csv")
print(f"cell type NMI : {result_df.loc['X_pca', 'KMeans NMI']}")